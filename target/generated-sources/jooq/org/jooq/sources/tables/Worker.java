/*
 * This file is generated by jOOQ.
 */
package org.jooq.sources.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.sources.Keys;
import org.jooq.sources.Public;
import org.jooq.sources.tables.records.WorkerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Worker extends TableImpl<WorkerRecord> {

    private static final long serialVersionUID = -1784664614;

    /**
     * The reference instance of <code>public.Worker</code>
     */
    public static final Worker WORKER = new Worker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkerRecord> getRecordType() {
        return WorkerRecord.class;
    }

    /**
     * The column <code>public.Worker.WorkerID</code>.
     */
    public final TableField<WorkerRecord, Integer> WORKERID = createField("WorkerID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Worker_WorkerID_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Worker.WorkerName</code>.
     */
    public final TableField<WorkerRecord, String> WORKERNAME = createField("WorkerName", org.jooq.impl.SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.Worker.Worker_OrganizationID</code>.
     */
    public final TableField<WorkerRecord, Integer> WORKER_ORGANIZATIONID = createField("Worker_OrganizationID", SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Worker.Worker_WorkerID</code>.
     */
    public final TableField<WorkerRecord, Integer> WORKER_WORKERID = createField("Worker_WorkerID", SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.Worker</code> table reference
     */
    public Worker() {
        this(DSL.name("Worker"), null);
    }

    /**
     * Create an aliased <code>public.Worker</code> table reference
     */
    public Worker(String alias) {
        this(DSL.name(alias), WORKER);
    }

    /**
     * Create an aliased <code>public.Worker</code> table reference
     */
    public Worker(Name alias) {
        this(alias, WORKER);
    }

    private Worker(Name alias, Table<WorkerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Worker(Name alias, Table<WorkerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Worker(Table<O> child, ForeignKey<O, WorkerRecord> key) {
        super(child, key, WORKER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<WorkerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_WORKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WorkerRecord> getPrimaryKey() {
        return Keys.PK_WORKERID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WorkerRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkerRecord>>asList(Keys.PK_WORKERID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<WorkerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkerRecord, ?>>asList(Keys.WORKER__FK_WORKER_ORGANIZATIONID, Keys.WORKER__FK_WORKER_WORKERID);
    }

    public Organization organization() {
        return new Organization(this, Keys.WORKER__FK_WORKER_ORGANIZATIONID);
    }

    public org.jooq.sources.tables.Worker worker() {
        return new org.jooq.sources.tables.Worker(this, Keys.WORKER__FK_WORKER_WORKERID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Worker as(String alias) {
        return new Worker(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Worker as(Name alias) {
        return new Worker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Worker rename(String name) {
        return new Worker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Worker rename(Name name) {
        return new Worker(name, null);
    }
}
